// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.ujob.domain;

import es.uca.iw.ujob.domain.Demandante;
import es.uca.iw.ujob.domain.Titulacion;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Demandante_Roo_Finder {
    
    public static Long Demandante.countFindDemandantesByExperienciaLikeAndTitulaciones(String experiencia, Set<Titulacion> titulaciones) {
        if (experiencia == null || experiencia.length() == 0) throw new IllegalArgumentException("The experiencia argument is required");
        experiencia = experiencia.replace('*', '%');
        if (experiencia.charAt(0) != '%') {
            experiencia = "%" + experiencia;
        }
        if (experiencia.charAt(experiencia.length() - 1) != '%') {
            experiencia = experiencia + "%";
        }
        if (titulaciones == null) throw new IllegalArgumentException("The titulaciones argument is required");
        EntityManager em = Demandante.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT COUNT(o) FROM Demandante AS o WHERE LOWER(o.experiencia) LIKE LOWER(:experiencia)  AND");
        for (int i = 0; i < titulaciones.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :titulaciones_item").append(i).append(" MEMBER OF o.titulaciones");
        }
        TypedQuery q = em.createQuery(queryBuilder.toString(), Long.class);
        q.setParameter("experiencia", experiencia);
        int titulacionesIndex = 0;
        for (Titulacion _titulacion: titulaciones) {
            q.setParameter("titulaciones_item" + titulacionesIndex++, _titulacion);
        }
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Demandante> Demandante.findDemandantesByExperienciaLikeAndTitulaciones(String experiencia, Set<Titulacion> titulaciones) {
        if (experiencia == null || experiencia.length() == 0) throw new IllegalArgumentException("The experiencia argument is required");
        experiencia = experiencia.replace('*', '%');
        if (experiencia.charAt(0) != '%') {
            experiencia = "%" + experiencia;
        }
        if (experiencia.charAt(experiencia.length() - 1) != '%') {
            experiencia = experiencia + "%";
        }
        if (titulaciones == null) throw new IllegalArgumentException("The titulaciones argument is required");
        EntityManager em = Demandante.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Demandante AS o WHERE LOWER(o.experiencia) LIKE LOWER(:experiencia)  AND");
        for (int i = 0; i < titulaciones.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :titulaciones_item").append(i).append(" MEMBER OF o.titulaciones");
        }
        TypedQuery<Demandante> q = em.createQuery(queryBuilder.toString(), Demandante.class);
        q.setParameter("experiencia", experiencia);
        int titulacionesIndex = 0;
        for (Titulacion _titulacion: titulaciones) {
            q.setParameter("titulaciones_item" + titulacionesIndex++, _titulacion);
        }
        return q;
    }
    
}
