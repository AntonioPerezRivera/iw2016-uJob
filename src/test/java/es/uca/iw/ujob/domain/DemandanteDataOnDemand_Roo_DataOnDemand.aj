// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.ujob.domain;

import es.uca.iw.ujob.domain.Demandante;
import es.uca.iw.ujob.domain.DemandanteDataOnDemand;
import es.uca.iw.ujob.domain.UsersDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect DemandanteDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DemandanteDataOnDemand: @Component;
    
    private Random DemandanteDataOnDemand.rnd = new SecureRandom();
    
    private List<Demandante> DemandanteDataOnDemand.data;
    
    @Autowired
    UsersDataOnDemand DemandanteDataOnDemand.usersDataOnDemand;
    
    public Demandante DemandanteDataOnDemand.getNewTransientDemandante(int index) {
        Demandante obj = new Demandante();
        setDireccion(obj, index);
        setEmail(obj, index);
        setExperiencia(obj, index);
        setFecha_nacimiento(obj, index);
        setNombre(obj, index);
        setSexo(obj, index);
        setTelefono(obj, index);
        return obj;
    }
    
    public void DemandanteDataOnDemand.setDireccion(Demandante obj, int index) {
        String direccion = "direccion_" + index;
        if (direccion.length() > 255) {
            direccion = direccion.substring(0, 255);
        }
        obj.setDireccion(direccion);
    }
    
    public void DemandanteDataOnDemand.setEmail(Demandante obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 255) {
            email = email.substring(0, 255);
        }
        obj.setEmail(email);
    }
    
    public void DemandanteDataOnDemand.setExperiencia(Demandante obj, int index) {
        String experiencia = "experiencia_" + index;
        if (experiencia.length() > 255) {
            experiencia = experiencia.substring(0, 255);
        }
        obj.setExperiencia(experiencia);
    }
    
    public void DemandanteDataOnDemand.setFecha_nacimiento(Demandante obj, int index) {
        Date fecha_nacimiento = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha_nacimiento(fecha_nacimiento);
    }
    
    public void DemandanteDataOnDemand.setNombre(Demandante obj, int index) {
        String nombre = "nombre_" + index;
        obj.setNombre(nombre);
    }
    
    public void DemandanteDataOnDemand.setSexo(Demandante obj, int index) {
        String sexo = "sexo_" + index;
        obj.setSexo(sexo);
    }
    
    public void DemandanteDataOnDemand.setTelefono(Demandante obj, int index) {
        String telefono = "telefon_" + index;
        if (telefono.length() > 9) {
            telefono = telefono.substring(0, 9);
        }
        obj.setTelefono(telefono);
    }
    
    public Demandante DemandanteDataOnDemand.getSpecificDemandante(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Demandante obj = data.get(index);
        String id = obj.getDni();
        return Demandante.findDemandante(id);
    }
    
    public Demandante DemandanteDataOnDemand.getRandomDemandante() {
        init();
        Demandante obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getDni();
        return Demandante.findDemandante(id);
    }
    
    public boolean DemandanteDataOnDemand.modifyDemandante(Demandante obj) {
        return false;
    }
    
    public void DemandanteDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Demandante.findDemandanteEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Demandante' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Demandante>();
        for (int i = 0; i < 10; i++) {
            Demandante obj = getNewTransientDemandante(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
