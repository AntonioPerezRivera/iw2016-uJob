// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.uca.iw.ujob.domain;

import es.uca.iw.ujob.domain.EmpresaDataOnDemand;
import es.uca.iw.ujob.domain.UserRole;
import es.uca.iw.ujob.domain.UserRoleDataOnDemand;
import es.uca.iw.ujob.domain.Users;
import es.uca.iw.ujob.domain.UsersDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UsersDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UsersDataOnDemand: @Component;
    
    private Random UsersDataOnDemand.rnd = new SecureRandom();
    
    private List<Users> UsersDataOnDemand.data;
    
    @Autowired
    EmpresaDataOnDemand UsersDataOnDemand.empresaDataOnDemand;
    
    @Autowired
    UserRoleDataOnDemand UsersDataOnDemand.userRoleDataOnDemand;
    
    public Users UsersDataOnDemand.getNewTransientUsers(int index) {
        Users obj = new Users();
        setEmail(obj, index);
        setEnable(obj, index);
        setName(obj, index);
        setPassword(obj, index);
        setUserRole(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UsersDataOnDemand.setEmail(Users obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void UsersDataOnDemand.setEnable(Users obj, int index) {
        Boolean enable = Boolean.TRUE;
        obj.setEnable(enable);
    }
    
    public void UsersDataOnDemand.setName(Users obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void UsersDataOnDemand.setPassword(Users obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void UsersDataOnDemand.setUserRole(Users obj, int index) {
        UserRole userRole = userRoleDataOnDemand.getRandomUserRole();
        obj.setUserRole(userRole);
    }
    
    public void UsersDataOnDemand.setUsername(Users obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public Users UsersDataOnDemand.getSpecificUsers(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Users obj = data.get(index);
        String id = obj.getDni();
        return Users.findUsers(id);
    }
    
    public Users UsersDataOnDemand.getRandomUsers() {
        init();
        Users obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getDni();
        return Users.findUsers(id);
    }
    
    public boolean UsersDataOnDemand.modifyUsers(Users obj) {
        return false;
    }
    
    public void UsersDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Users.findUsersEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Users' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Users>();
        for (int i = 0; i < 10; i++) {
            Users obj = getNewTransientUsers(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
